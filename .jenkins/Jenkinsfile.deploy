import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand
import org.kie.jenkins.MavenStagingHelper

deployProperties = [:]

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g'
    }

    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }

    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/nightly_release.groovy file
    // }

    environment {
        // Some generated env is also defined into ./dsl/jobs/nightly_release.groovy file
        
        MAVEN_OPTS = '-Xms1024m -Xmx4g'

        BOT_BRANCH_HASH = "${util.generateHash(10)}"

        // Maven configuration
        MAVEN_DEPLOY_LOCAL_DIR="${WORKSPACE}/maven_deploy_dir"
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs()
                    
                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }

                    checkoutRepo('kogito-runtimes')
                }
            }
            post {
                success {
                    script {
                        setDeployPropertyIfNeeded('git.branch', getGitBranch())
                        setDeployPropertyIfNeeded('git.author', getGitAuthor())
                        setDeployPropertyIfNeeded('project.version', getProjectVersion())
                        setDeployPropertyIfNeeded('release', isRelease())
                    }
                }
            }
        }
        stage('Prepare for PR'){
            when {
                expression { return isRelease() }
            }
            steps {
                prepareForPR('kogito-runtimes')
            }
        }
        stage('Update project version'){
            when {
                expression { return getProjectVersion() != '' }
            }
            steps {
                script {
                    // Set version
                    maven.mvnVersionsSet(getMavenCommand(), getProjectVersion())
                }
            }
        }
        stage('Build & Test') {
            steps {
                script {
                    getMavenCommand().skipTests(params.SKIP_TESTS).run('clean install')
                }
            }
            post {
                always {
                    saveReports(params.SKIP_TESTS)
                }
            }
        }
        stage('Deploy artifacts') {
            steps {
                script {
                    // Usually `env.MAVEN_DEPLOY_REPOSITORY` is used for testing purpose
                    if(!isRelease() || env['MAVEN_DEPLOY_REPOSITORY']) {
                        runMavenDeploy(getMavenCommand())
                    } else {
                         // Deploy locally and then to staging
                        runMavenDeployLocally(getMavenCommand(), 'runtimes')
                        runMavenStage(getMavenCommand(), 'runtimes')
                    }
                }
            }
        }
        stage('Create PR'){
            when {
                expression { return isRelease() }
            }
            steps {
                commitAndCreatePR('kogito-runtimes')
            }
            post {
                success {
                    script {
                        // Runtimes
                        setDeployPropertyIfNeeded('kogito-runtimes.pr.source.uri', "https://github.com/${getBotAuthor()}/kogito-runtimes")
                        setDeployPropertyIfNeeded('kogito-runtimes.pr.source.ref', getBotBranch())
                        setDeployPropertyIfNeeded('kogito-runtimes.pr.target.uri', "https://github.com/${getGitAuthor()}/kogito-runtimes")
                        setDeployPropertyIfNeeded('kogito-runtimes.pr.target.ref', getGitBranch())
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def propertiesStr = deployProperties.collect{ entry ->  "${entry.key}=${entry.value}" }.join("\n")
                writeFile(text: propertiesStr, file: 'deployment.properties')
                archiveArtifacts(artifacts: 'deployment.properties')
            }
            cleanWs()
        }
    }
}

void saveReports(boolean allowEmpty=false){
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: allowEmpty
}

void checkoutRepo(String repo, String dirName=repo) {
    dir(dirName) {
        deleteDir()
        checkout(githubscm.resolveRepository(repo, getGitAuthor(), getGitBranch(), false))
    }
}

void prepareForPR(String repo) {
    dir(repo) {
        githubscm.forkRepo(getBotAuthorCredsID())
        githubscm.createBranch(getBotBranch())
    }
}

void commitAndCreatePR(String repo) {
    dir(repo) {
        def commitMsg = "[${getGitBranch()}] Update project version to ${getProjectVersion()} for release"
        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}.\nPlease do not merge, it will be merged automatically after testing."

        githubscm.commitChanges(commitMsg, { githubscm.findAndStageNotIgnoredFiles('pom.xml') })
        githubscm.pushObject('origin', getBotBranch(), getBotAuthorCredsID())
        deployProperties["${repo}.pr.link"] = githubscm.createPR(commitMsg, prBody, getGitBranch(), getBotAuthorCredsID())
    }
}

boolean isRelease() {
    return params.RELEASE
}

String getGitAuthor(){
    return env.GIT_AUTHOR
}

String getGitBranch(){
    return env.GIT_BRANCH_NAME
}

String getProjectVersion(){
    return params.PROJECT_VERSION
}

String getBotBranch(){
    return "${getProjectVersion()}-${env.BOT_BRANCH_HASH}"
}

String getBotAuthor(){
    return env.GIT_AUTHOR_BOT
}

String getBotAuthorCredsID(){
    return env.BOT_CREDENTIALS_ID
}

void setDeployPropertyIfNeeded(String key, def value){
    if (value != null && value != ''){
        deployProperties[key] = value
    }
}

MavenCommand getMavenCommand(){
    return new MavenCommand(this, ['-fae'])
                .withSettingsXmlId(env.MAVEN_SETTINGS_CONFIG_FILE_ID)
                .inDirectory('kogito-runtimes')
                .withProperty('full')
}

void runMavenDeploy(MavenCommand mvnCmd){
    mvnCmd = mvnCmd.clone()
    
    if("${MAVEN_DEPLOY_REPOSITORY}"){
        mvnCmd.withDeployRepository("${MAVEN_DEPLOY_REPOSITORY}")
    }

    mvnCmd.skipTests(true).run('clean deploy')
}

void runMavenDeployLocally(MavenCommand mvnCmd, String localDeployId) {
    mvnCmd.clone()
        .skipTests(true)
        .withLocalDeployFolder(getLocalDeploymentFolder(localDeployId))
        .run('clean deploy')
}

void runMavenStage(MavenCommand mvnCmd, String localDeployId) {
    MavenStagingHelper stagingHelper = getStagingHelper(mvnCmd)
    deployProperties.putAll(stagingHelper.stageLocalArtifacts("${NEXUS_STAGING_PROFILE_ID}", getLocalDeploymentFolder(localDeployId)))
    stagingHelper.promoteStagingRepository("${NEXUS_BUILD_PROMOTION_PROFILE_ID}")
}

MavenStagingHelper getStagingHelper(MavenCommand mvnCmd) {
    return new MavenStagingHelper(this, mvnCmd)
        .withNexusReleaseUrl("${NEXUS_RELEASE_URL}")
        .withNexusReleaseRepositoryId("${NEXUS_RELEASE_REPOSITORY_ID}")
}

String getLocalDeploymentFolder(String localDeployId){
    return "${env.MAVEN_DEPLOY_LOCAL_DIR}/${localDeployId}"
}
