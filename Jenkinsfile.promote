import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

deployProperties = [:]
pipelineProperties = [:]

pipeline {
    agent {
        label 'kie-rhel7'
    }

    tools {
        maven 'kie-maven-3.6.2'
        jdk 'kie-jdk11'
    }
    
    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Some generated env is also defined into ./dsl/jobs.groovy file

        PROPERTIES_FILE_NAME = 'deployment.properties'
        
        BOT_BRANCH_HASH = "${util.generateHash(10)}"

        GITHUB_CLI_VERSION = '0.11.1'
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()
                    
                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }

                    installGithubCLI()
                }
            }
        }
        stage('Merge deploy PR and tag') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir('kogito-runtimes') {
                        checkoutRepo('kogito-runtimes')
                        mergeAndPush('kogito-runtimes', getDeployPrLink('kogito-runtimes'))
                        tagLatest()
                    }
                }
            }
        }
        stage('Set next snapshot version'){
            when {
                expression { return isRelease() }
            }
            steps {
                script {
                    dir('kogito-runtimes-bot') {
                        prepareForPR('kogito-runtimes')
                        
                        maven.mvnVersionsSet(getMavenCommand(), getSnapshotVersion(), true)

                        commitAndCreatePR('kogito-runtimes')
                    }
                    dir('kogito-runtimes') {
                        sh "git checkout ${getGitBranch()}"
                        mergeAndPush('kogito-runtimes', getPipelinePrLink('kogito-runtimes'))
                        
                        runMavenDeploy(getMavenCommand())
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    String deployUrl = params.DEPLOY_BUILD_URL
    if (deployUrl != ''){
        if(!deployUrl.endsWith('/')){
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/${PROPERTIES_FILE_NAME} -O ${PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect{ entry -> "${entry.key}=${entry.value}" }.join('\n')
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ''
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ''){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return env.RELEASE.toBoolean()
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')
}

String getSnapshotVersion() {
    return util.getNextVersion(getProjectVersion(), 'micro')
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : getProjectVersion()
}

String getGitBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID(){
    return env.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID(){
    return env.BOT_CREDENTIALS_ID
}

String getDeployPrLink(String repo){
    return getDeployProperty("${repo}.pr.link")
}

String getPipelinePrLink(String repo){
    return pipelineProperties["${repo}.pr.link"]
}

void setPipelinePrLink(String repo, String value){
    pipelineProperties["${repo}.pr.link"] = value
}

String getSnapshotBranch(){
    return "${getSnapshotVersion().toLowerCase()}-${env.BOT_BRANCH_HASH}"
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutRepo(String repo) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getGitBranch(), false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getGitBranch()}"
}

void mergeAndPush(String repo, String prLink) {
    if (prLink != '') {
        githubscm.mergePR(prLink, getGitAuthorCredsID())
        githubscm.pushObject('origin', getGitBranch(), getGitAuthorCredsID())
    }
}

void tagLatest() {
    if (getGitTag() != '') {
        githubscm.tagRepository(getGitTag(), env.BUILD_TAG)
        githubscm.pushObject('origin', "--tags ${getGitTag()}", getGitAuthorCredsID())
    }
}

void prepareForPR(String repo) {
    checkoutRepo(repo)
    githubscm.forkRepo(getBotAuthorCredsID())
    githubscm.createBranch(getSnapshotBranch())
}

void commitAndCreatePR(String repo) {
    def commitMsg = "[${getGitBranch()}] Update snapshot version to ${getSnapshotVersion()}"
    def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}.\nPlease do not merge, it will be merged automatically after testing."
    
    githubscm.commitChanges(commitMsg, { githubscm.findAndStageNotIgnoredFiles('pom.xml') })
    githubscm.pushObject('origin', getSnapshotBranch(), getBotAuthorCredsID())
    setPipelinePrLink(repo, githubscm.createPR(commitMsg, prBody, getGitBranch(), getBotAuthorCredsID()))
}

void installGithubCLI() {
    sh """
    wget https://github.com/cli/cli/releases/download/v${env.GITHUB_CLI_VERSION}/gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    tar xzf gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    mv gh_${env.GITHUB_CLI_VERSION}_linux_amd64/bin/gh .
    rm -r gh_${env.GITHUB_CLI_VERSION}_linux_amd64*
    """
}

MavenCommand getMavenCommand() {
    mvnCmd = new MavenCommand(this, ['-fae'])
                    .withSettingsXmlId("${MAVEN_SETTINGS_CONFIG_FILE_ID}")
    if (env.MAVEN_DEPENDENCIES_REPOSITORY) {
        mvnCmd.withDependencyRepositoryInSettings('deps-repo', env.MAVEN_DEPENDENCIES_REPOSITORY)
    }
    return mvnCmd
}

void runMavenDeploy(MavenCommand mvnCmd){
    mvnCmd = mvnCmd.clone()
    if("${MAVEN_DEPLOY_REPOSITORY}"){
        mvnCmd.withDeployRepository("${MAVEN_DEPLOY_REPOSITORY}")
    }
    mvnCmd.skipTests(true).run('clean deploy')
}
